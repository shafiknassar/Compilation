%{
    #include <iostream>
    //#include "attributes.h"
    using namespace std;
    
    int yylex();
    void yyerror(const char*);
    %}
/* Type tokens */
%token VOID // special case: can be a return type, but not a variable declaration
%token INT
%token BYTE
%token B
%token BOOL
/* Binary Arithmetic Operations */
%left PLUS MINUS
%left MULT DIV
/* Logical Operations */
%left AND
%left OR
%left NOT
/* Values */
%token TRUE
%token FALSE
%token NUM
%token STRING
/* Control Flow */
%token IF
%token ELSE
%token WHILE
%token BREAK
%token RETURN
/* Brackets and Parenthesis */
%left LPAREN RPAREN
%left LBRACE RBRACE
%left LBRACK RBRACK
/* Relational Operators */
/* keep them separated inorder to
 give different precedence to every op */
%left EQ
%left NEQ
%nonassoc LT      // <
%nonassoc GT      // >
%nonassoc LE     // <=
%nonassoc GE     // >=
/* Assigment */
%right ASSIGN
/* ID */
%token ID
/* Separators */
%token SC
%token COMMA

%%

Program      : Funcs
;
Funcs        : FuncDecl
             | /*epsilon*/
;
FuncDecl     : RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE
;
RetType      : Type
             | VOID
;
Formals      : FormalsList
             | /*epsilon*/
;
FormalsList  : FormalDecl
             | FormalDecl COMMA FormalsList
;
FormalDecl   : Type ID
             | Type ID LBRACK NUM RBRACK
             | Type ID LBRACK NUM B RBRACK
;
Statements   : Statement
             | Statements Statement
;
Statement    : LBRACE Statements RBRACE
             | Type ID SC
             | Type ID ASSIGN Exp SC
             | Type ID LBRACK NUM RBRACK SC
             | Type ID LBRACK NUM B RBRACK SC
             | ID ASSIGN Exp SC
             | ID LBRACK Exp RBRACK ASSIGN Exp SC
             | Call SC
             | RETURN SC
             | RETURN Exp SC
             | IF LPAREN Exp RPAREN Statement
             | IF LPAREN Exp RPAREN Statement ELSE Statement
             | WHILE LPAREN Exp RPAREN Statement
             | BREAK SC
;
Call         : ID LPAREN ExpList RPAREN
             | ID LPAREN RPAREN
;
ExpList      : Exp
             | Exp COMMA ExpList
;
Type         : INT
             | BYTE
             | BOOL
;
Exp          : LPAREN Exp RPAREN
             | ID LBRACK Exp RBRACK
             | Exp BinOp Exp
             | ID
             | Call
             | NUM
             | NUM B
             | STRING
             | TRUE
             | FALSE
             | NOT Exp
             | Exp AND Exp
             | Exp OR Exp
             | Exp RelOp Exp
;
BinOp        : PLUS
             | MINUS
             | MULT
             | DIV
;
RelOp        : EQ
             | NEQ
             | GE
             | GT
             | LE
             | LT
;

%%

void yyerror(const char*) { cout << "syntax error" << endl; }

int main() {
    return yyparse();
}
