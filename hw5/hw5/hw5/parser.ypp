%{
    #include "includes.h"
    
    //#define YYERROR_VERBOSE 1
    //#define YYDEBUG 1
%}
/* Type tokens */
%token VOID // special case: can be a return type, but not a variable declaration
%token INT
%token BYTE
%token B
%token BOOL
/* Binary Arithmetic Operations */
%left PLUS MINUS
%left MULT DIV
/* Logical Operations */
%left AND
%left OR
%left NOT
/* Values */
%token TRUE
%token FALSE
%token NUM
%token STRING
/* Brackets and Parenthesis */
%left LPAREN RPAREN
%left LBRACE RBRACE
%left LBRACK RBRACK
/* Control Flow */
%token IF
%nonassoc ELSE
%token WHILE
%token BREAK
%token RETURN
/* Relational Operators */
/* keep them separated inorder to
 give different precedence to every op */
%nonassoc RELOP
%left BINOP
/* Assigment */
%right ASSIGN
/* ID */
%token ID
/* Separators */
%token SC
%token COMMA

%%

Program      : mInit Funcs { rule_Program__end();}
     
;
mInit         : { rule_init(); }
Funcs        : FuncDecl Funcs  
             | /*epsilon*/
;
FuncDecl     : FuncHeader LBRACE Statements RBRACE { closeScope(); }
;

FuncHeader   : RetType ID LPAREN Formals RPAREN  
             { rule_FuncHeader((Type*)$1, (Variable*)$2, (FormList*)$4);
             /* map variables to registers */}


RetType      : Type { $$=$1; }  
             | VOID { $$=$1; }  
;
Formals      : FormalsList { $$ = $1;}  
             | /*epsilon*/ { $$ = new FormList(); /*empty list*/}  
;
FormalsList  : FormalDecl { $$ = new FormList(); ((FormList*)$$)->add((FormDec*)$1); }  
             | FormalDecl COMMA FormalsList { $$ = rule_FormalsList__FormalDecl_COMMA_FormalsList((FormDec*)$1, (FormList*)$3); }  
;
FormalDecl   : Type ID
                { $$ = rule_FormalDecl__Type_ID((Type*)$1, (Variable*)$2); }
                /* assign variable to register */
             | Type ID LBRACK NUM RBRACK
                /* assign array address to register */
                { $$ = rule_FormalDecl__Type_ID_LBRACK_NUM_RBRACK((Type*)$1, (Variable*)$2, (NumVal*)$4); }
             | Type ID LBRACK NUM B RBRACK
                /* assign array address to register */
                { $$ = rule_FormalDecl__Type_ID_LBRACK_NUMB_RBRACK((Type*)$1, (Variable*)$2, (NumVal*)$4); }
;

Statements   : Statement
             | Statements Statement  
;

IfHeader     : IF LPAREN Exp
                { rule_Statement__IF_LPAREN_Exp_RPAREN_Statement((Expression*)$3); }

WhileHeader  : WHILE LPAREN Exp
                { rule_Statement__WHILE_LPAREN_Exp_RPAREN_Statement((Expression*)$3); }

Statement    : LBRACE mOpenScope Statements mCloseScope RBRACE  
             | Type ID SC { rule_Statement__Type_ID_SC((Type*)$1, (Variable*)$2); }
             | Type ID LBRACK NUM RBRACK SC { rule_Statement__Type_ID_LBRACK_NUM_RBRACK_SC((Type*)$1, (Variable*)$2, (NumVal*)$4); }
             | Type ID LBRACK NUM B RBRACK SC { rule_Statement__Type_ID_LBRACK_NUMB_RBRACK_SC((Type*)$1, (Variable*)$2, (NumVal*)$4); }
             | Type ID ASSIGN Exp SC
                /* copy the expression register to the id (trgt) register */
                { rule_Statement__Type_ID_ASSIGN_Exp_SC((Type*)$1, (Variable*)$2, (Expression*)$4); }
             | ID ASSIGN Exp SC
                /* copy the expression register to the id (trgt) register */
                { rule_Statement__ID_ASSIGN_Exp_SC((Variable*)$1, (Expression*)$3); }
             | ID LBRACK Exp RBRACK ASSIGN Exp SC
                /* copy the expression register to the location on memory */
                { rule_Statement__ID_LBRACK_Exp_RBRACK_ASSIGN_Exp_SC((Variable*)$1, (Expression*)$3, (Expression*)$6); }
             | Call SC
             | RETURN SC
                { rule_Statement__RETURN_SC(); }
             | RETURN Exp SC
                /* copy the expression register to the result (trgt) register */
                { rule_Statement__RETURN_Exp_SC((Expression*)$2); }
             | IfHeader RPAREN mOpenScope Statement mCloseScope
             | IfHeader RPAREN mOpenScope Statement mCloseScope ELSE mOpenScope Statement mCloseScope
             | WhileHeader RPAREN mOWhileScope Statement mCWhileScope
             | BREAK SC { rule_Statement__BREAK_SC(); }
;

mOpenScope  : { openScope(); }  
mCloseScope : { closeScope(); }  
mOWhileScope: { openWhileScope(); }
mCWhileScope: { closeWhileScope(); }


Call         : ID LPAREN ExpList RPAREN
                /* copy registers of expList to the argument registers (or memory if needed) */
                { $$ = rule_Call__ID_LPAREN_ExpList_RPAREN((Variable*)$1, (ExprList*)$3); }
            | ID LPAREN RPAREN { $$ = rule_Call__ID_LPAREN_RPAREN((Variable*)$1); }  
;

ExpList      : Exp { $$ = new ExprList(); ((ExprList*)$$)->v.push_back((Expression*)$1); }
             | Exp COMMA ExpList { $$ = $3; ((ExprList*)$$)->v.push_back((Expression*)$1); }
;
Type         : INT  { $$=$1; }  
             | BYTE { $$=$1; }  
             | BOOL { $$=$1; }  
;
Exp          : LPAREN Exp RPAREN
                { $$=$2; }
             | ID LBRACK Exp RBRACK
                { $$ = rule_Exp__ID_LBRACK_Exp_RBRACK((Variable*)$1); }
             | Exp BINOP Exp
                /* assign result to register */
                { $$ = rule_Exp__Exp_BINOP_Exp((Expression*)$1, (Expression*)$3); }
             | ID
                { $$ = rule_Exp__ID((Variable*)$1); }
             | Call
                /* store result (if numerical) in register */
                { $$ = $1; }
             | NUM
                { $$ = $1; }
             | NUM B
                {
                    if ($1->val > 255) {
                        output::errorByteTooLarge(yylineno, $1->sVal);
                        exit(0);
                    }
                    $$ = $1;
                }
             | STRING
                { $$= new Expression(M_STRING); }
             | TRUE
                { $$ = new Expression(M_BOOL); }
             | FALSE
                { $$ = new Expression(M_BOOL); }
             | NOT Exp
                { $$ = rule_Exp__NOT_Exp((Expression*)$2); }
             | Exp AND Exp
                { $$ = rule_Exp__Exp_AND_Exp((Expression*)$1, (Expression*)$3); }
             | Exp OR Exp
                { $$ = rule_Exp__Exp_OR_Exp((Expression*)$1, (Expression*)$3); }
             | Exp RELOP Exp
                { $$ = rule_Exp__Exp_RELOP_Exp((Expression*)$1, (Expression*)$3); }
;


%%

void yyerror(const char*) { errorSyn(yylineno); }

int main() {
    //yydebug = 1;
    return yyparse();
}
