%{
    #include "includes.h"
    
    //#define YYERROR_VERBOSE 1
    //#define YYDEBUG 1
%}

%token VOID INT BYTE BOOL RETURN IF WHILE BREAK LPAREN LBRACE LBRACK ASSIGN
%nonassoc SC RBRACE
%nonassoc NUM
%nonassoc B
%nonassoc ID STRING TRUE FALSE
%nonassoc COMMA

%left AND
%left OR
%left RELOP
%left ADDSUB
%left MULDIV
%right NOT
%right RPAREN RBRACK
%right ELSE
%%

Program      : mInit Funcs { rule_Program__end();}
     
;

mInit         : { rule_init(); }
Funcs        : FuncDecl Funcs  
             | /*epsilon*/
;

FuncDecl     : FuncHeader LBRACE Statements RBRACE
                { rule_FuncBody($3); closeScope(); }
;

FuncHeader   : RetType ID LPAREN Formals RPAREN  
                { rule_FuncHeader((Type*)$1, (Variable*)$2, (FormList*)$4); }


RetType      : Type
                { $$=$1; }
             | VOID
                { $$=$1; }
;

Formals      : FormalsList
                { $$ = $1;}
             | /*epsilon*/
                { $$ = new FormList(); /*empty list*/}
;

FormalsList  : FormalDecl
                { $$ = new FormList(); ((FormList*)$$)->add((Variable*)$1); }
             | FormalDecl COMMA FormalsList
                { $$ = rule_FormalsList((Variable*)$1, (FormList*)$3); }
;

FormalDecl   : Type ID
                { $$ = rule_FormalDecl__Type_ID((Type*)$1, (Variable*)$2); }
             | Type ID LBRACK NUM RBRACK
                { $$ = rule_FormalDecl__Type_ID_NUM((Type*)$1, (Variable*)$2, (Expression*)$4); }
             | Type ID LBRACK NUM B RBRACK
                { $$ = rule_FormalDecl__Type_ID_NUMB((Type*)$1, (Variable*)$2, (Expression*)$4); }
;

Statements   : Statement
                {$$ = $1;}
             | Statements M Statement
                { $$ = rule_Statements($1, $2, $3); }
;

IfHeader     : IF LPAREN Exp
                { $$ = $3; checkType((Expression*)$3); }
;

Statement    : LBRACE mOpenScope Statements M RBRACE mCloseScope
                {  $$ = rule_StatementScope($3, $4);}
             | Type ID SC
                { $$ = new Node(); rule_Statement__Type_ID_SC((Type*)$1, (Variable*)$2); }
             | Type ID LBRACK NUM RBRACK SC
                { $$ = new Node(); rule_Statement__Type_ID_NUM_SC((Type*)$1, (Variable*)$2, (Expression*)$4); }
             | Type ID LBRACK NUM B RBRACK SC
                { $$ = new Node(); rule_Statement__Type_ID_NUMB_SC((Type*)$1, (Variable*)$2, (Expression*)$4); }
             | Type ID ASSIGN Exp SC
                { $$ = new Node(); rule_Statement__Type_ID_ASSIGN_Exp_SC((Type*)$1, (Variable*)$2, (Expression*)$4); }
             | ID ASSIGN Exp SC
                { $$ = new Node(); rule_Statement__ID_ASSIGN_Exp_SC((Variable*)$1, (Expression*)$3); }
             | ID LBRACK Exp RBRACK ASSIGN Exp SC
                { $$ = new Node(); rule_Statement__ID_Exp_ASSIGN_Exp_SC((Variable*)$1, (Expression*)$3, (Expression*)$6); }
             | Call SC
                { $$ = (Node*)$1; }
             | RETURN SC
                { $$ = new Node(); rule_Statement__RETURN_SC(); }
             | RETURN Exp SC
                { $$ = new Node(); rule_Statement__RETURN_Exp_SC((Expression*)$2); }
             | IfHeader RPAREN mOpenScope M Statement mCloseScope N
                /* S->if(B) { S1 }*/
                { $$ = rule_Statement__IF_Statement((Expression*)$1, $4, $5, $7); }
             | IfHeader RPAREN mOpenScope M Statement mCloseScope N ELSE mOpenScope M Statement mCloseScope
                /* S->if(B) { S1 } else { S2 }*/
                { $$ = rule_Statement__IF_ELSE_Statement((Expression*)$1, $4, $5, $7, $10, $11); }
             | WHILE LPAREN M Exp RPAREN
                /* S->while(B) { S1 }*/
                { checkType((Expression*)$4); }
               M mOWhileScope Statement mCWhileScope
                { $$ = rule_Statement__WHILE_Statement((Expression*)$4, $3, $7, $9); }
             | BREAK SC
                { $$ = rule_Statement__BREAK_SC(); }
;

mOpenScope  : { openScope(); }  
mCloseScope : { closeScope(); }  
mOWhileScope: { openWhileScope(); }
mCWhileScope: { closeWhileScope(); }


Call         : ID LPAREN ExpList RPAREN
                { $$ = rule_Call__ID_ExpList((Variable*)$1, (ExprList*)$3); }
             | ID LPAREN RPAREN
                { $$ = rule_Call__ID((Variable*)$1); }
;

ExpList      : Exp
                { $$ = new ExprList(); rule_ExprList((ExprList*)$$, (Expression*)$1); }
             | Exp COMMA ExpList
                { $$ = $3; rule_ExprList((ExprList*)$$, (Expression*)$1); }
;

Type         : INT
                { $$=$1; }
             | BYTE
                { $$=$1; }
             | BOOL
                { $$=$1; }
;

Exp          : LPAREN Exp RPAREN
                { $$=$2; }
             | ID LBRACK Exp RBRACK
                { $$ = rule_Exp__ID_Exp((Variable*)$1, (Expression*)$3); }
             | Exp ADDSUB Exp
                { $$ = rule_Exp__Exp_BINOP_Exp((Expression*)$1, $2->token, (Expression*)$3); }
             | Exp MULDIV Exp
                { $$ = rule_Exp__Exp_BINOP_Exp((Expression*)$1, $2->token, (Expression*)$3); }
             | ID
                { $$ = rule_Exp__ID((Variable*)$1); }
             | Call
                { $$ = rule_Exp__Call((Expression*)$1); }
             | NUM
                { $$ = rule_Exp__NUM((Expression*)$1); }
             | NUM B
                {
                    if (atoi(((Expression*)$1)->value.c_str()) > 255) {
                        output::errorByteTooLarge(yylineno, ((Expression*)$1)->value);
                        exit(0);
                    }
                    ((Expression*)$1)->type = M_BYTE;
                    $$ = rule_Exp__NUM((Expression*)$1);
                }
             | STRING
                { $$ = rule_Exp__STRING((Expression*)$1); }
             | TRUE
                { $$ = rule_Exp__TRUE(); }
             | FALSE
                { $$ = rule_Exp__FALSE(); }
             | NOT Exp
                { $$ = rule_Exp__NOT_Exp((Expression*)$2); }
             | Exp AND M Exp
                { $$ = rule_Exp__Exp_AND_Exp((Expression*)$1, $3, (Expression*)$4); }
             | Exp OR M Exp
                { $$ = rule_Exp__Exp_OR_Exp((Expression*)$1, $3, (Expression*)$4); }
             | Exp RELOP Exp
                { $$ = rule_Exp__Exp_RELOP_Exp((Expression*)$1, $2->token, (Expression*)$3); }
;

M           : { $$ = marker__M(); }
N           : { $$ = marker__N(); }

%%

void yyerror(const char*) { output::errorSyn(yylineno); }

int main() {
    //yydebug = 1;
    return yyparse();
}

